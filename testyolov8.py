import cv2
import streamlit as st
import av
import numpy as np
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase

# Giao di·ªán Streamlit
st.title("üé• ·ª®ng d·ª•ng Theo D√µi Chuy·ªÉn ƒê·ªông (WebRTC)")
st.sidebar.write("### C√†i ƒë·∫∑t")

# Tham s·ªë c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
min_contour_area = st.sidebar.slider("Di·ªán t√≠ch vi·ªÅn t·ªëi thi·ªÉu", 50, 1000, 200)
threshold_value = st.sidebar.slider("ƒê·ªô nh·∫°y ph√°t hi·ªán", 5, 50, 15)
blur_size = (11, 11)  # Gi·ªØ nguy√™n b·ªô l·ªçc l√†m m·ªù ƒë·ªÉ gi·∫£m nhi·ªÖu

# B·ªô x·ª≠ l√Ω video
class MotionDetectionProcessor(VideoProcessorBase):
    def __init__(self):
        self.prev_gray = None  # L∆∞u frame tr∆∞·ªõc ƒë·ªÉ so s√°nh

    def recv(self, frame):
        img = frame.to_ndarray(format="bgr24")  # Chuy·ªÉn frame th√†nh numpy array
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, blur_size, 0)

        if self.prev_gray is None:
            self.prev_gray = gray
            return av.VideoFrame.from_ndarray(img, format="bgr24")

        # T√≠nh to√°n s·ª± kh√°c bi·ªát gi·ªØa frame hi·ªán t·∫°i v√† tr∆∞·ªõc ƒë√≥
        delta_frame = cv2.absdiff(self.prev_gray, gray)
        thresh = cv2.threshold(delta_frame, threshold_value, 255, cv2.THRESH_BINARY)[1]
        thresh = cv2.dilate(thresh, None, iterations=2)

        # T√¨m contours
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for contour in contours:
            if cv2.contourArea(contour) < min_contour_area:
                continue
            (x, y, w, h) = cv2.boundingRect(contour)
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

        self.prev_gray = gray  # L∆∞u frame hi·ªán t·∫°i cho l·∫ßn ti·∫øp theo
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# Ch·∫°y WebRTC Stream
webrtc_streamer(
    key="motion-detect",
    video_processor_factory=MotionDetectionProcessor,
    media_stream_constraints={"video": True, "audio": False}  # Ch·ªâ b·∫≠t camera, kh√¥ng c·∫ßn mic
)
